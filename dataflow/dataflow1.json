{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ReadFile",
						"type": "DatasetReference"
					},
					"name": "DataFlow"
				},
				{
					"dataset": {
						"referenceName": "SA_CountryLookUp",
						"type": "DatasetReference"
					},
					"name": "CountryLookups"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "IMFFile",
						"type": "DatasetReference"
					},
					"name": "Output"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "selectonlyrequiredfields"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "Lookupcountry"
				},
				{
					"name": "SelectAfterlookups"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as long,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date 'dd-MM-yyyy',",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DataFlow",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookups",
				"DataFlow filter(continent =='Europe' && not(isNull(country_code))) ~> filter1",
				"filter1 select(mapColumn(",
				"          country,",
				"          country_code,",
				"          continent,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          date,",
				"          rate_14_day,",
				"          source,",
				"          case_indicator = indicator,",
				"          each(match(name=='date'),",
				"               'reported'+'_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectonlyrequiredfields",
				"selectonlyrequiredfields pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          date,",
				"          country_special = country+country_code),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"pivot1, CountryLookups lookup(pivot1@country == CountryLookups@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> Lookupcountry",
				"Lookupcountry select(mapColumn(",
				"          country = pivot1@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivot1@population,",
				"          {countconfirmed cases},",
				"          countdeaths,",
				"          date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAfterlookups",
				"SelectAfterlookups sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Output"
			]
		}
	}
}